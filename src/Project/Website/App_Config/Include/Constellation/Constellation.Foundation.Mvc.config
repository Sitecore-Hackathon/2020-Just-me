<?xml version="1.0" encoding="utf-8" ?>
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<!-- 
	
	
	
	DO NOT MODIFY THIS FILE. 
	
	USE SITECORE PATCH CONFIGS TO CHANGE BEHAVIOR. 
	
	ANY CHANGES TO THIS FILE MAY BE OVERWRITTEN IN A FUTURE RELEASE
	
	
	
	-->
	<sitecore>
		<settings>
			<!--  
			Rendering Item Path Root
			Specifies the portion of the RenderingItem's Full Path to ignore when constructing the file system path to the matching View.
			You do not have to use filesystem-friendly names, the ViewResolver will attempt to construct a filesystem-friendly path at runtime.
			
			The $Helix token represents a Rendering Folder named after Helix layers: Foundation, Feature and Project. If you are storing your
			Rendering Definitions in /sitecore/layout/renderings/(Foundation|Feature|Project)/ - which you should be! then you need to add this
			placeholder in the RenderingItemPathRoot setting below. Helix folders are not represented in View Paths because of the limitations
			of MVC areas.
			
			
			The $Area token represents the MVC Area where the View is stored. This token is optional, but it is recommended that you follow these guidelines:
			1. Store Renderings in a discrete folder below the Helix appropriate root in Sitecore: ~/layout/renderings/(Foundation|Feature|Project)
			2. Group Renderings by Foundation|Feature|Project module name below this Helix root: ~/layout/renderings/Feature/Press Releases/rendering name
			3. This Foundation|Feature|Project module should be represented on disk as an MVC Area.
			
			Default: "/sitecore/layout/renderings/$Helix/$Area"
			-->
			<setting name="Constellation.Foundation.Mvc.RenderingItemPathRoot" value="/sitecore/layout/renderings/$Helix" />

			<!--  
			View Root Path
			Specifies the starting folder location on disk to prefix the RenderingItem's path when using that path to resolve a View.
			
			The $Area token can be used to specify the value of the Area name specified in the Rendering Item.
			Default: "~/Areas/$Area/Views"
			-->
			<setting name="Constellation.Foundation.Mvc.ViewRootPath" value="~/Views" />
		</settings>
		<pipelines>
			<mvc.getRenderer>
				<!--
				Get Controller Renderer
				Allows you to infer the controller name from the name of the Rendering Item (must be a Controller Rendering type Item)
				You do not have to set the Controller or Controller Action fields. It assumes "Index" for the action, and constructs
				the controller name from the name of the Rendering (attempts to turn the name into a valid C# class name).
				Direct replacement for Sitecore's default GetControllerRenderer, and is backwards compatible.
				-->
				<processor 
					patch:instead="*[@type='Sitecore.Mvc.Pipelines.Response.GetRenderer.GetControllerRenderer, Sitecore.Mvc']" 
					type="Constellation.Foundation.Mvc.Pipelines.GetRenderer.GetControllerRenderer, Constellation.Foundation.Mvc"
				/>

			</mvc.getRenderer>
        </pipelines>
		<services>
			<!--
				Register IViewPathResolver with Dependency Injection
				-->
			<configurator type="Constellation.Foundation.Mvc.ServicesConfigurator, Constellation.Foundation.Mvc"/>
		</services>
	</sitecore>
</configuration>
